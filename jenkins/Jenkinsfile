pipeline {
    agent none
    stages {
        /*stage('Unit Test') { 
            agent {
                docker {
                    image 'maven:3.8.5-jdk-11'
                    args '-v /root/.m2:/root/.m2 -v --net="tallerdeinvestigacin_devops"'
                }
            }
            steps {
                configFileProvider([configFile(fileId: 'acaf626e-bcad-47c2-9ac8-66e73f40f3ce', variable: 'MAVEN_SETTINGS')]) {
                    sh 'mvn -s $MAVEN_SETTINGS clean test'
                }
            }
        }
        stage('Static Analysis') {
            agent {
                docker {
                    image 'maven:3.8.5-jdk-11'
                    args '-v /root/.m2:/root/.m2 --net="tallerdeinvestigacin_devops"'
                }
            }
            steps {
                withCredentials([string(credentialsId: 'sonar_login', variable: 'SECRET')]) {
                    sh 'mvn sonar:sonar -Dsonar.host.url=http://172.20.0.6:9000 -Dsonar.login=$SECRET -Dsonar.projectKey=Test1'
                }
            }
        }
        stage('Build') {
            agent {
                docker {
                    image 'maven:3.8.5-jdk-11'
                    args '-v /root/.m2:/root/.m2 --net="tallerdeinvestigacin_devops"'
                }
            }
            environment {
                GIT_SSH_COMMAND = "ssh -o StrictHostKeyChecking=no"
            }
            steps {
                sh """
                git config --global user.email julioo.wong@gmail.com
                git config --global user.name JulioWong
                """
                
                configFileProvider([configFile(fileId: 'acaf626e-bcad-47c2-9ac8-66e73f40f3ce', variable: 'MAVEN_SETTINGS')]) {
                    // sh 'mvn clean package -DskipTests=true -s $MAVEN_SETTINGS deploy:deploy'
                    sh 'mvn -DskipTests=true -s $MAVEN_SETTINGS --batch-mode release:clean release:prepare release:perform'
                }
            }
        }*/
        stage("Determine new version") {
            agent any
            steps{
                script {
                    env.NEW_VERSION = sh(script: 'git describe --tags --abbrev=0', returnStdout: true).trim().substring(1)
                }
            }
        }
        stage('Deploy') {
            agent any
            environment {
                AWS_ACCESS_KEY_ID = credentials('AccessKeyID')
                AWS_SECRET_ACCESS_KEY = credentials('SecretAccessKey')
            }
            steps {
                sh 'aws configure set region us-east-1'
                sh 'aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 235274383227.dkr.ecr.us-east-1.amazonaws.com'
                sh 'aws --version'
                sh 'git status'
                
                echo "Git committer email: ${NEW_VERSION}"
            }
        }
    }
}